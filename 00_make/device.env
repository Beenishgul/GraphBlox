#!make
# =========================================================
#                        XILINX ARGS                    
# =========================================================
XILINX_DIR       = xilinx_project
UTILS_DIR        = utils
UTILS_PERL       = utils.pl
UTILS_PYTHON     = utils.py
UTILS_TCL        = utils.tcl
UTILS_SHELL      = utils.sh
UTILS_XDC        = utils.xdc
UTILS_QOR        = utils.qor
UTILS_RPT        = utils.rpt
UTILS_XCLBIN     = utils.xclbin
UTILS_PARAMS     = utils.params
IP_DIR_RTL       = rtl
IP_DIR_HLS       = hls
IP_DIR_CONFIG    = config
IP_DIR_OVERLAY   = ol
REPORTS_DIR      = rpt

FULL_SRC_IP_DIR_CONFIG        = $(ROOT_DIR)/$(APP_DIR)/$(DEVICE_DIR)/$(IP_DIR_CONFIG)
FULL_SRC_IP_DIR_OVERLAY       = $(ROOT_DIR)/$(APP_DIR)/$(DEVICE_DIR)/$(IP_DIR_OVERLAY)
FULL_SRC_IP_DIR_RTL           = $(ROOT_DIR)/$(APP_DIR)/$(DEVICE_DIR)/$(IP_DIR_RTL)
FULL_SRC_IP_DIR_RTL_ACTIVE    = $(APP_DIR_ACTIVE)/$(IP_DIR_RTL_ACTIVE)

XILINX_VITIS_DIR  = ${XILINX_VITIS} 
XILINX_VIVADO_DIR = ${XILINX_VIVADO}
VIVADO_VER_FULL   = $(shell basename "${XILINX_VIVADO}" | cut -f 1 -d '.')
VIVADO_VER        = ${VIVADO_VER_FULL}

VIVADO_PACKAGE_DIR  = vivado_$(KERNEL_NAME).pkg
VIVADO_SIMULATE_DIR = vivado_$(KERNEL_NAME).sim
VIVADO_RUN_DIR      = $(KERNEL_NAME).run
VIVADO_BUILD_DIR    = vivado_$(KERNEL_NAME).$(TARGET)
VIVADO_VMA_DIR      = vivado_$(KERNEL_NAME).vma
VIVADO_EXPORT_DIR   = $(KERNEL_NAME).export
VIVADO_IMPORT_DIR   = $(KERNEL_NAME).import
VIVADO_VIP_DIR      = vivado_$(KERNEL_NAME).pkg
VITIS_BUILD_DIR     = vitis_$(KERNEL_NAME).pkg

APP_DIR_ACTIVE      = $(ROOT_DIR)/$(APP_DIR)/$(DEVICE_DIR)/$(XILINX_DIR_ACTIVE)

TOPOLOGY_CHECKSUM   = $(shell sha256sum $(FULL_SRC_IP_DIR_OVERLAY)/$(ARCHITECTURE)/$(CAPABILITY)/topology.json | awk '{print substr($$1, 1, 8)}')

XILINX_DIR_ACTIVE  = $(XILINX_DIR)_$(KERNEL_NAME)_$(ARCHITECTURE)_$(CAPABILITY)_$(ALGORITHM_NAME)_$(GIT_VER)_$(TOPOLOGY_CHECKSUM)
UTILS_DIR_ACTIVE   = vivado_$(KERNEL_NAME).$(UTILS_DIR)
IP_DIR_RTL_ACTIVE  = vivado_$(KERNEL_NAME).$(IP_DIR_RTL)
IP_DIR_HLS_ACTIVE  = vivado_$(KERNEL_NAME).$(IP_DIR_HLS)
REPORTS_DIR_ACTIVE = vivado_$(KERNEL_NAME).$(REPORTS_DIR)
KERNEL_PROJECT_PKG_XPR = $(APP_DIR_ACTIVE)/$(VIVADO_PACKAGE_DIR)/$(KERNEL_NAME)/$(KERNEL_NAME).xpr
KERNEL_PROJECT_VPP_XPR = $(APP_DIR_ACTIVE)/$(VIVADO_BUILD_DIR)/${KERNEL_NAME}.build/link/vivado/vpl/prj/prj.xpr

ACTIVE_PARAMS_DIR      = $(APP_DIR_ACTIVE)/$(UTILS_DIR_ACTIVE)/$(UTILS_PARAMS)
ACTIVE_PARAMS_SH_DIR   = $(ACTIVE_PARAMS_DIR)/$(PARAMS_SH)
ACTIVE_PARAMS_TCL_DIR  = $(ACTIVE_PARAMS_DIR)/$(PARAMS_TCL)
# =========================================================
# =========================================================

COLOR_TAIL_IMPL_PL    = $(APP_DIR_ACTIVE)/$(UTILS_DIR_ACTIVE)/$(UTILS_PERL)/color_tail_impl.pl
COLOR_TAIL_EMU_PL     = $(APP_DIR_ACTIVE)/$(UTILS_DIR_ACTIVE)/$(UTILS_PERL)/color_tail_emu.pl
COLOR_TAIL_EMU_SUB_PL = $(APP_DIR_ACTIVE)/$(UTILS_DIR_ACTIVE)/$(UTILS_PERL)/color_tail_emu_sub.pl
COLOR_TAIL_PACK_PL    = $(APP_DIR_ACTIVE)/$(UTILS_DIR_ACTIVE)/$(UTILS_PERL)/color_tail_pack.pl
COLOR_TAIL_REPORT_PL  = $(APP_DIR_ACTIVE)/$(UTILS_DIR_ACTIVE)/$(UTILS_PERL)/color_tail_report.pl
COLOR_TAIL_SIM_PL     = $(APP_DIR_ACTIVE)/$(UTILS_DIR_ACTIVE)/$(UTILS_PERL)/color_tail_sim.pl

# =========================================================
# APP Device properties    
# =========================================================
KERNEL_NAME        = glay_kernel
DEVICE_INDEX       = 0
XCLBIN_PATH        = $(ROOT_DIR)/$(APP_DIR)/$(DEVICE_DIR)/$(XILINX_DIR_ACTIVE)/vivado_$(KERNEL_NAME).$(TARGET)/$(KERNEL_NAME)_$(TARGET).xclbin
# XCLBIN_PATH        = $(ROOT_DIR)/$(APP_DIR)/$(DEVICE_DIR)/$(XILINX_DIR_ACTIVE)/$(VITIS_BUILD_DIR)/glay_system_hw_link/Hardware/binary_container_1.xclbin
OVERLAY_PATH       = $(FULL_SRC_IP_DIR_OVERLAY)/$(ARCHITECTURE)/$(CAPABILITY)/$(CAPABILITY).ol/$(ALGORITHM_NAME).ol
# DSA                = $(call device2sandsa, $(DEVICE_INDEX))
# =========================================================

# =========================================================
# PART and PLATFORM settings
# =========================================================
# PART: remove comment the line matching Alveo card
# PLATFORM: remove comment the line matching  Alveo card
# =========================================================
# How many parallel jobs works for [0-7] 
# For number of jobs is XILINX_JOBS_STRATEGY=2
# Synth -> 2 parallel synths 
# Impl  -> 2 parallel implementations  
# =========================================================
ifeq ($(HOST_NAME), default)
	ALVEO =  U250
	PART  =  xcu250-figd2104-2L-e
	PLATFORM = xilinx_u250_gen3x16_xdma_4_1_202210_1
	
	XILINX_JOBS_STRATEGY = 1
	XILINX_MAX_THREADS   = 1
else ifeq ($(HOST_NAME), panther)
	ALVEO =  U280
	PART  =  xcu280-fsvh2892-2L-e
	PLATFORM   = xilinx_u280_gen3x16_xdma_1_202211_1

# 	ALVEO =  U55
# 	PART  = xcu55c-fsvh2892-2L-e
# 	PLATFORM = xilinx_u55c_gen3x16_xdma_3_202210_1
	
	XILINX_JOBS_STRATEGY = 4
	XILINX_MAX_THREADS   = 4
else ifeq ($(HOST_NAME), jaguar)
# 	ALVEO =  U250
# 	PART  =  xcu250-figd2104-2L-e
# 	PLATFORM = xilinx_u250_gen3x16_xdma_4_1_202210_1

	ALVEO =  U280
	PART  =  xcu280-fsvh2892-2L-e
	PLATFORM   = xilinx_u280_gen3x16_xdma_1_202211_1

# 	ALVEO =  U55
# 	PART  = xcu55c-fsvh2892-2L-e
# 	PLATFORM = xilinx_u55c_gen3x16_xdma_3_202210_1

	XILINX_JOBS_STRATEGY = 32
	XILINX_MAX_THREADS   = 32
else
# 	ALVEO =  U250
# 	PART  =  xcu250-figd2104-2L-e
# 	PLATFORM = xilinx_u250_gen3x16_xdma_4_1_202210_1

# 	ALVEO =  U200
# 	PART  =  xcu200-fsgd2104-2-e
# 	PLATFORM =  xilinx_u200_gen3x16_xdma_2_202110_1

# 	ALVEO =  U50
# 	PART  =  xcu50-fsvh2104-2-e
# 	PLATFORM =  xilinx_u50_gen3x16_xdma_5_202210_1

# 	ALVEO =  U55
# 	PART  =  xcu55c-fsvh2892-2L-e
# 	PLATFORM =  xilinx_u55c_gen3x16_xdma_3_202210_1

	ALVEO =  U280
	PART  =  xcu280-fsvh2892-2L-e
	PLATFORM =  xilinx_u280_gen3x16_xdma_1_202211_1

	XILINX_JOBS_STRATEGY = 16
	XILINX_MAX_THREADS   = 16
endif
# =========================================================

# =========================================================
# TARGET: set the build target, can be hw or hw_emu
# =========================================================
TARGET = hw_emu
# TARGET = hw
# =========================================================


# =========================================================
# *** OVERRIDE_TOPOLOGY_JSON=0 HAS NO EFFECT - Set in topology.json
# =========================================================
# Enabling Multiple Strategies For Closing Timing TARGET=hw
# =========================================================
# [0-7]-strategies
# Example: 
# XILINX_IMPL_STRATEGY =0 #(fast ~2hrs) 
# XILINX_IMPL_STRATEGY =2 #(slow upto 33 strategies ~13hrs)
# Check 01_device/utils/generate_build_cfg
# pick a suitable strategy or add yours
# =========================================================
XILINX_IMPL_STRATEGY = 1
# =========================================================
# Enabling Multiple Kernels For CU = to num threads on host
# =========================================================
XILINX_NUM_KERNELS = $(NUM_THREADS_KER) 
# =========================================================
# =========================================================
# *** OVERRIDE_TOPOLOGY_JSON=0 HAS NO EFFECT - Set in topology.json
# =========================================================


# =========================================================
# Control mode options
# =========================================================
# Control mode XRT/OCL/HLS (AP_CTRL_HS, AP_CTRL_CHAIN) 
# Control mode USER (USER_MANAGED)
# =========================================================
XILINX_CTRL_MODE     = USER_MANAGED
# XILINX_CTRL_MODE     = AP_CTRL_HS
# XILINX_CTRL_MODE     = AP_CTRL_CHAIN
# XILINX_CTRL_MODE     = ap_ctrl_none
# =========================================================

# =========================================================
# *** OVERRIDE_TOPOLOGY_JSON=0 HAS NO EFFECT - Set in topology.json
# =========================================================
# CACHE SIZE FOR EACH CU
# C_CACHE_SIZE    Cache size in bytes 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304
# =========================================================
# SYSTEM_CACHE_SIZE_B  = 65536
SYSTEM_CACHE_SIZE_B  = $(CACHE_SIZE)
DESIGN_FREQ_HZ       = 300000000  
# =========================================================
# *** OVERRIDE_TOPOLOGY_JSON=0 HAS NO EFFECT - Set in topology.json
# =========================================================

# =========================================================
# Select Testbench for simulation testbench_glay/arbiter
# =========================================================
TESTBENCH_MODULE     = integration
# TESTBENCH_MODULE     = unit/arbiter
# TESTBENCH_MODULE     = unit/kernel_setup
# TESTBENCH_MODULE     = unit/alu_operations
# TESTBENCH_MODULE     = unit/conditional_break
# TESTBENCH_MODULE     = unit/conditional_continue
# TESTBENCH_MODULE     = unit/conditional_filter
# TESTBENCH_MODULE     = unit/random_read_engine
# TESTBENCH_MODULE     = unit/random_write_engine
# TESTBENCH_MODULE     = unit/serial_read_engine
# TESTBENCH_MODULE     = unit/serial_write_engine
# TESTBENCH_MODULE     = unit/stride_index_generator
# =========================================================

# =========================================================
# Each project is tagged with a GIT commit id
# If you want to commit code and reuse same project metadata
# remove comment for this variable and choose any number
# =========================================================
#if you make a push and use a previous compile 
# GIT_VER              = cd7ae93
# =========================================================

# =========================================================
# Each project has topology Architecture
# ARCHITECTURE.CAPABILITY/architecture.ALGORITHM_NAME.json
# Project GLay
# Capability Full, lite, Single, Test
# Algorithm BFS, PR, CC, SSSP, TC
# =========================================================
#if you make a push and use a previous compile 
ARCHITECTURE              = GLay
CAPABILITY                = Single
# CAPABILITY                = Lite
# CAPABILITY                = Full

# =========================================================
# ARCHITECTURE              = Sieve
# CAPABILITY                = Single

# =========================================================
# ARCHITECTURE              = NearAutomata
# CAPABILITY                = Single
# CAPABILITY                = Full

# =========================================================
# ARCHITECTURE              = Suite
# CAPABILITY                = Single
# CAPABILITY                = Full
# =========================================================
VIVADO_GUI_FLAG    = NO
# VIVADO_GUI_FLAG    = YES
# =========================================================
# =========================================================
# Mode: 0 - behavioral, 
#       1 - post-synthesis, functional
# 		2 - post-implementation ,functional
#         * Type : functional, timing
# =========================================================
# =========================================================
SIMULATION_MODE = 1
# =========================================================
# Per CU
# =========================================================
# Pause cu cache/buffer module auto generation.For debugging
PAUSE_FILE_GENERATION  = 0
# =========================================================
# *** OVERRIDE_TOPOLOGY_JSON=0 HAS NO EFFECT - Set in topology.json
# =========================================================
OVERRIDE_TOPOLOGY_JSON = 0