#!make
# =========================================================
#                GENERAL DIRECTOIRES HOST               
# =========================================================
ROOT_DIR                = $(shell cd .. ; pwd)
APP_DIR                 = $(shell basename "$(PWD)")
MAKE_DIR                = 00_make
HOST_DIR                = 01_host
DEVICE_DIR              = 02_device
BENCH_DIR               = 03_data

HOST_ARCH               = $(shell uname -p)

# =========================================================
# Checks for g++
# =========================================================
ifeq ($(HOST_ARCH), x86_64)
ifneq ($(shell expr $(shell g++ -dumpversion) \>= 5), 1)
ifndef XILINX_VIVADO
$(error [ERROR]: g++ version older. Please use 5.0 or above.)
else
CXX = $(XILINX_VIVADO)/tps/lnx64/gcc-6.2.0/bin/g++
$(warning [WARNING]: g++ version older. Using g++ provided by the tool : $(CXX))
endif
endif
else ifeq ($(HOST_ARCH), aarch64)
CXX = $(XILINX_VITIS)/gnu/aarch64/lin/aarch64-linux/bin/aarch64-linux-gnu-g++
else ifeq ($(HOST_ARCH), aarch32)
CXX = $(XILINX_VITIS)/gnu/aarch32/lin/gcc-arm-linux-gnueabi/bin/arm-linux-gnueabihf-g++
endif
# =========================================================

ifeq ($(shell cd . ; git log -1 --pretty=format:"%h" 2>/dev/null),)
    GIT_VER = 1
else
    GIT_VER = $(shell cd . ; git log -1 --pretty=format:"%h" 2>/dev/null)
endif

ifeq ($(shell /usr/bin/hostnamectl --transient 2>/dev/null),)
    HOST_NAME  = default
else
    HOST_NAME  = $(shell /usr/bin/hostnamectl --transient 2>/dev/null)
endif

# =========================================================
# CLI COMMANDS                           
# =========================================================
RM      =-@rm -f
RMDIR   =-@rm -rf
CP_RF   =-@cp -rf
CP      =-@cp
MKDIR   =-@mkdir
MKDIR_P =-@mkdir -p
EXPORT  =-@export
CD      =-@cd
ECHO    =-@echo
BASH    =-@bash
PYTHON  =-@python3
TAIL_F  =-@tail -f 
UNSET   =-@unset
NOHUP   =-@nohup
EMCONFIGUTIL = $(XILINX_VITIS)/bin/emconfigutil

# TEST PASS OR FAIL
PASS = \033[92mPASS\033[0m
FAIL = \033[91mFAIL\033[0m

# =========================================================
# Color coded messages                      
# =========================================================
YELLOW  =\033[0;33m
GREEN   =\033[0;32m
BLUE    =\033[0;34m
RED     =\033[0;31m
NC      =\033[0m
# =========================================================

# =========================================================
#                APP HOST PROPERTIES    
# =========================================================

# =========================================================
# Application name 00_GLay/src/main folder (glay.c) 
# =========================================================
APP  = glay
# =========================================================

# =========================================================
# Application name 00_GLay/src/test folder (test.c/cpp) 
# =========================================================
# APP_TEST  = test_match
# APP_TEST = test_glay
# APP_TEST = test_StalaGraph
APP_TEST = test_glayGraph_$(XILINX_CTRL_MODE)
# APP_TEST = test_glayGraph_emu

# =========================================================
# Application extention ./src/test folder (test.c/cpp) 
# =========================================================
APP_LANG = cpp
# APP_LANG = c
# =========================================================

# =========================================================
# Application name src/algorithms folder openmp/cuda/fpga
# =========================================================
INTEGRATION         = openmp
# INTEGRATION         = glay
# =========================================================

# =========================================================
# Nested make calls args for host/device makefiles
# =========================================================
ifeq ($(shell grep -c ^processor /proc/cpuinfo),)
    MAKE_NUM_THREADS = 1
else
    MAKE_NUM_THREADS = $(shell grep -c ^processor /proc/cpuinfo)
endif

MAKE_HOST   = --no-print-directory -C $(ROOT_DIR)/$(APP_DIR)/$(HOST_DIR) -j$(MAKE_NUM_THREADS)
MAKE_DEVICE = --no-print-directory -C $(ROOT_DIR)/$(APP_DIR)/$(DEVICE_DIR)

# =========================================================
# Include make env
# =========================================================
include ./$(MAKE_DIR)/host.env
include ./$(MAKE_DIR)/device.env

PARAMS_TCL = params.tcl
PARAMS_SH  = params.sh

PARAMS_SH_DIR=$(ROOT_DIR)/$(APP_DIR)/$(MAKE_DIR)/$(PARAMS_SH)
PARAMS_TCL_DIR=$(ROOT_DIR)/$(APP_DIR)/$(MAKE_DIR)/$(PARAMS_TCL)

# =========================================================
# GLay HOST Argument list               
# =========================================================
GLAY_FPGA_ARGS     = -m $(DEVICE_INDEX) -q $(XCLBIN_PATH) -Q $(KERNEL_NAME) -X $(OVERLAY_PATH)
# =========================================================
ifeq ($(FILE_BIN_TYPE),graph.wbin)
ARGS = -w 
endif

ifeq ($(FILE_BIN_TYPE),graph.wel)
ARGS = -w 
endif

ARGS += $(GLAY_FPGA_ARGS) -M $(MASK_MODE) -j $(INOUT_STATS) -g $(BIN_SIZE) -z $(FILE_FORMAT) -c $(CONVERT_FORMAT) -d $(DATA_STRUCTURES) -a $(ALGORITHMS) -r $(ROOT) -n $(NUM_THREADS_PRE) -N $(NUM_THREADS_ALGO) -K $(NUM_THREADS_KER) -i $(NUM_ITERATIONS) -o $(SORT_TYPE) -p $(PULL_PUSH) -t $(NUM_TRIALS) -e $(TOLERANCE) -F $(FILE_LABEL) -l $(REORDER_LAYER1) -L $(REORDER_LAYER2) -O $(REORDER_LAYER3) -b $(DELTA) -C $(CACHE_SIZE)
# =========================================================
