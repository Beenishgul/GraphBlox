#!make
# =========================================================
#                   GRAPH ARGUMENTS HOST                
# =========================================================

# =========================================================
# TEST # all test graphs directory location
# =========================================================
GRAPH_DIR = $(ROOT_DIR)/$(APP_DIR)/$(BENCH_DIR)
# =========================================================

# =========================================================
# TEST # small test graphs
# =========================================================
GRAPH_SUIT = TEST
# GRAPH_NAME = test
GRAPH_NAME = v51_e1021
# GRAPH_NAME = v300_e2730
# GRAPH_NAME = graphbrew

# GRAPH_SUIT = LAW
# GRAPH_NAME = LAW-amazon-2008
# GRAPH_NAME = LAW-cnr-2000
# GRAPH_NAME = LAW-dblp-2010
# GRAPH_NAME = LAW-enron

# GRAPH_SUIT = KRON
# GRAPH_NAME = RMAT

# FILE_BIN_TYPE = g.20.16.text
# FILE_LABEL_TYPE = a.20.16.1000000.text

# FILE_BIN_TYPE   = g.20.16.text.dbin
# FILE_LABEL_TYPE = a.20.16.1000000.text.dbin

# FILE_BIN_TYPE   =  g.5.16.text.dbin
# FILE_LABEL_TYPE = a.5.16.100.text.dbin

# FILE_BIN_TYPE = g.24.16.text.dbin
# FILE_LABEL_TYPE = a.24.16.10000000.text.dbin

# FILE_BIN_TYPE = g.24.16.text
# FILE_LABEL_TYPE = a.24.16.10000000.text

# FILE_BIN_TYPE = graph.txt.bin
FILE_BIN_TYPE = graph.bin
# FILE_BIN_TYPE = graph.wbin

# FILE_LABEL_TYPE = graph_Gorder.labels
# FILE_LABEL_TYPE = graph_Rabbit.labels
# =========================================================

# =========================================================
# GRAPH file location with and if any relabel files exist
# =========================================================
FILE_BIN = $(GRAPH_DIR)/$(GRAPH_SUIT)/$(GRAPH_NAME)/$(FILE_BIN_TYPE)
FILE_LABEL = $(GRAPH_DIR)/$(GRAPH_SUIT)/$(GRAPH_NAME)/$(FILE_LABEL_TYPE)
# =========================================================

# =========================================================
# ALGORITHM Flow
# =========================================================
PULL_PUSH        = 0
ALGORITHMS       = 0
# =========================================================

# =========================================================
# GRAPH DATA_STRUCTURES Pre-Processing
# =========================================================
SORT_TYPE        = 1
DATA_STRUCTURES  = 0
REORDER_LAYER1   = 0
REORDER_LAYER2   = 0
REORDER_LAYER3   = 0
# CACHE_SIZE       = 32768 #(32KB)
# CACHE_SIZE       = 262144 #(256KB)
CACHE_SIZE       = 5068672 #(22MB)
# =========================================================

# =========================================================
# ALGORITHM SPECIFIC ARGS
# =========================================================
ROOT             = 0
TOLERANCE        = 1e-8
DELTA            = 800
NUM_ITERATIONS   = 1
# =========================================================

# =========================================================
# Parallel Pre-Processing/Algorithm/Kernel (dominant loop)
# =========================================================
NUM_THREADS_PRE  = 1
NUM_THREADS_ALGO = 1
NUM_THREADS_KER  = 1
# =========================================================

# =========================================================
# Number of runs for each algorithm
# =========================================================
NUM_TRIALS       = 1
# =========================================================

# =========================================================
# GRAPH FROMAT EDGELIST
# =========================================================
FILE_FORMAT      = 1
CONVERT_FORMAT   = 1
# =========================================================

# =========================================================
# STATS COLLECTION VARIABLES
# =========================================================
BIN_SIZE         = 1000
INOUT_STATS      = 0
MASK_MODE        = 0
# =========================================================
VIVADO_GUI_FLAG    = NO
# VIVADO_GUI_FLAG    = YES
# =========================================================
#                        XILINX ARGS                    
# =========================================================
XILINX_DIR         = xilinx_project
UTILS_DIR        = utils
UTILS_PERL       = utils.pl
UTILS_TCL        = utils.tcl
UTILS_SHELL      = utils.sh
UTILS_XDC        = utils.xdc
IP_DIR_RTL       = rtl
IP_DIR_HLS       = hls
REPORTS_DIR      = rpt

VIVADO_PACKAGE_DIR  = vivado_$(KERNEL_NAME).pkg
VIVADO_SIMULATE_DIR = vivado_$(KERNEL_NAME).sim
VIVADO_RUN_DIR      = $(KERNEL_NAME).run
VIVADO_BUILD_DIR    = vivado_$(KERNEL_NAME).$(TARGET)
VIVADO_VMA_DIR      = vivado_$(KERNEL_NAME).vma
VIVADO_EXPORT_DIR   = $(KERNEL_NAME).export
VIVADO_IMPORT_DIR   = $(KERNEL_NAME).import
VIVADO_VIP_DIR      = vivado_$(KERNEL_NAME).vip
VITIS_BUILD_DIR     = vitis_$(KERNEL_NAME).pkg

XILINX_DIR_ACTIVE  = $(XILINX_DIR)_$(KERNEL_NAME)_$(GIT_VER)
UTILS_DIR_ACTIVE   = vivado_$(KERNEL_NAME).$(UTILS_DIR)
IP_DIR_RTL_ACTIVE  = vivado_$(KERNEL_NAME).$(IP_DIR_RTL)
IP_DIR_HLS_ACTIVE  = vivado_$(KERNEL_NAME).$(IP_DIR_HLS)
REPORTS_DIR_ACTIVE = vivado_$(KERNEL_NAME).$(REPORTS_DIR)
# =========================================================

# =========================================================
# APP Device properties    
# =========================================================
KERNEL_NAME        = glay_kernel
DEVICE_INDEX       = 0
XCLBIN_PATH        = $(ROOT_DIR)/$(APP_DIR)/$(DEVICE_DIR)/$(XILINX_DIR_ACTIVE)/vivado_$(TARGET)/$(KERNEL_NAME)_$(TARGET).xclbin
# XCLBIN_PATH        = $(ROOT_DIR)/$(APP_DIR)/$(DEVICE_DIR)/$(XILINX_DIR_ACTIVE)/vitis_build_$(KERNEL_NAME)/$(KERNEL_NAME)_system_hw_link/Emulation-HW/binary_container_1.xclbin
# =========================================================

# =========================================================
# PART and PLATFORM settings
# =========================================================
# PART: remove comment the line matching Alveo card
# PLATFORM: remove comment the line matching  Alveo card
# =========================================================
# How many parallel jobs works for [0-7] 
# For number of jobs is XILINX_JOBS_STRATEGY=2
# Synth -> 2 parallel synths 
# Impl  -> 2 parallel implementations  
# =========================================================
ifeq ($(HOST_NAME), default)
	ALVEO =  U250
	PART  =  xcu250-figd2104-2L-e
	PLATFORM = xilinx_u250_gen3x16_xdma_4_1_202210_1
	
	VIVADO_VER = 2022
	DESIGN_FREQ_HZ = 300000000  
	XILINX_JOBS_STRATEGY = 1
	XILINX_MAX_THREADS   = 1
else ifeq ($(HOST_NAME), panther)
	ALVEO =  U280
	PART  =  xcu280-fsvh2892-2L-e
	PLATFORM   = xilinx_u280_gen3x16_xdma_1_202211_1

# 	ALVEO =  U55
# 	PART  = xcu55c-fsvh2892-2L-e
# 	PLATFORM = xilinx_u55c_gen3x16_xdma_3_202210_1
	
	VIVADO_VER = 2022
	DESIGN_FREQ_HZ = 300000000  
	XILINX_JOBS_STRATEGY = 4
	XILINX_MAX_THREADS   = 8
else ifeq ($(HOST_NAME), jaguar)
	ALVEO =  U250
	PART  =  xcu250-figd2104-2L-e
	PLATFORM = xilinx_u250_gen3x16_xdma_4_1_202210_1

# 	ALVEO =  U280
# 	PART  =  xcu280-fsvh2892-2L-e
# 	PLATFORM   = xilinx_u280_gen3x16_xdma_1_202211_1

# 	ALVEO =  U55
# 	PART  = xcu55c-fsvh2892-2L-e
# 	PLATFORM = xilinx_u55c_gen3x16_xdma_3_202210_1

	VIVADO_VER = 2023
	DESIGN_FREQ_HZ = 250000000  
	XILINX_JOBS_STRATEGY = 8
	XILINX_MAX_THREADS   = 32
else
	ALVEO =  U250
	PART  =  xcu250-figd2104-2L-e
	PLATFORM = xilinx_u250_gen3x16_xdma_4_1_202210_1

# 	ALVEO =  U200
# 	PART  =  xcu200-fsgd2104-2-e
# 	PLATFORM =  xilinx_u200_gen3x16_xdma_2_202110_1

# 	ALVEO =  U50
# 	PART  =  xcu50-fsvh2104-2-e
# 	PLATFORM =  xilinx_u50_gen3x16_xdma_5_202210_1

# 	ALVEO =  U55
# 	PART  =  xcu55c-fsvh2892-2L-e
# 	PLATFORM =  xilinx_u55c_gen3x16_xdma_3_202210_1

# 	ALVEO =  U280
# 	PART  =  xcu280-fsvh2892-2L-e
# 	PLATFORM =  xilinx_u280_gen3x16_xdma_1_202211_1

	VIVADO_VER     = 2023
	DESIGN_FREQ_HZ = 300000000  
	XILINX_JOBS_STRATEGY = 4
	XILINX_MAX_THREADS   = 8
endif
# =========================================================

# =========================================================
# TARGET: set the build target, can be hw or hw_emu
# =========================================================
TARGET = hw_emu
# TARGET = hw
# =========================================================

# =========================================================
# Enabling Multiple Strategies For Closing Timing TARGET=hw
# =========================================================
# [0-7]-strategies
# Example: 
# XILINX_IMPL_STRATEGY =0 #(fast ~2hrs) 
# XILINX_IMPL_STRATEGY =2 #(slow upto 33 strategies ~13hrs)
# Check 01_device/utils/generate_build_cfg
# pick a suitable strategy or add yours
# =========================================================
XILINX_IMPL_STRATEGY = 1
# =========================================================
# Enabling Multiple Kernels For CU
# =========================================================
XILINX_NUM_KERNELS = 1
# =========================================================
# =========================================================
# Control mode options
# =========================================================
# Control mode XRT/OCL/HLS (AP_CTRL_HS, AP_CTRL_CHAIN) 
# Control mode USER (USER_MANAGED)
# =========================================================
XILINX_CTRL_MODE     = USER_MANAGED
# XILINX_CTRL_MODE     = AP_CTRL_HS
# XILINX_CTRL_MODE     = AP_CTRL_CHAIN
# XILINX_CTRL_MODE     = ap_ctrl_none
# =========================================================



# =========================================================
# Select Testbench for simulation testbench_glay/arbiter
# =========================================================
TESTBENCH_MODULE     = integration
# TESTBENCH_MODULE     = unit/arbiter
# TESTBENCH_MODULE     = unit/kernel_setup
# TESTBENCH_MODULE     = unit/alu_operations
# TESTBENCH_MODULE     = unit/conditional_break
# TESTBENCH_MODULE     = unit/conditional_continue
# TESTBENCH_MODULE     = unit/conditional_filter
# TESTBENCH_MODULE     = unit/random_read_engine
# TESTBENCH_MODULE     = unit/random_write_engine
# TESTBENCH_MODULE     = unit/serial_read_engine
# TESTBENCH_MODULE     = unit/serial_write_engine
# TESTBENCH_MODULE     = unit/stride_index_generator
# =========================================================

# =========================================================
# Each project is tagged with a GIT commit id
# If you want to commit code and reuse same project metadata
# remove comment for this variable and choose any number
# =========================================================
#if you make a push and use a previous compile 
# GIT_VER              = 03c8d73
# =========================================================


