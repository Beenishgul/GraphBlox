#!/bin/bash -f
#*********************************************************************************************************
# Vivado (TM) v2022.1.2 (64-bit)
#
# Filename    : control_${kernel_name}_vip.sh
# Simulator   : Xilinx Vivado Simulator
# Description : Simulation script for compiling, elaborating and verifying the project source files.
#               The script will automatically create the design libraries sub-directories in the run
#               directory, add the library logical mappings in the simulator setup file, create default
#               'do/prj' file, execute compilation, elaboration and simulation steps.
#
# Generated by Vivado on Mon Nov 14 23:17:13 EST 2022
# SW Build 3605665 on Fri Aug  5 22:52:02 MDT 2022
#
# Tool Version Limit: 2022.04 
#
# usage: ${kernel_name}_testbench_xsim.sh [-help]
# usage: ${kernel_name}_testbench_xsim.sh [-lib_map_path]
# usage: ${kernel_name}_testbench_xsim.sh [-noclean_files]
# usage: ${kernel_name}_testbench_xsim.sh [-reset_run]
#
#*********************************************************************************************************


kernel_name=$1
app_directory=$2
scripts_directory=$3
ip_directory=$4
ctrl_mode=$5
tcl_directory=$6

generate_compile_filelist_f () {

  local scripts_directory_lp=$1
  local verilog_type=$2
  local sim_type=$3

  local concatinate=""
  
  for filepath in $( find ${scripts_directory_lp} -type f -iname "*${sim_type}*.${verilog_type}" ) ; do  
    concatinate+="-f ${filepath} "
  done 

  echo $concatinate
}

generate_include_filelist_f () {

  local scripts_directory_lp=$1
  local verilog_type=$2
  local sim_type=$3

  local concatinate=""

  for filepath in $( find ${scripts_directory_lp} -type f -iname "*${sim_type}*.${verilog_type}" ) ; do  
    for include_dir in $( cat ${filepath} ) ; do  
      concatinate+="-i ${include_dir} "
    done 
  done 

  echo $concatinate
}

# generate_xsim_filelist_f ${app_directory}/${scripts_directory} "f"

xvhdl_files=$(generate_compile_filelist_f ${app_directory}/${scripts_directory} "vhdl.f" "xsim")
xvlog_files=$(generate_compile_filelist_f ${app_directory}/${scripts_directory} "sv.f" "xsim")
xvlog_files+=" "$(generate_compile_filelist_f ${app_directory}/${scripts_directory} "v.f" "xsim")
xvlog_include=$(generate_include_filelist_f ${app_directory}/${scripts_directory} "vh.f" "xsim")

# # Set xvlog options
# xvhdl_files="-f ${app_directory}/${scripts_directory}/${kernel_name}_filelist_xsim.ip.vhdl.f"
# xvlog_files="-f ${app_directory}/${scripts_directory}/${kernel_name}_filelist_xsim.ip.sv.f -f ${app_directory}/${scripts_directory}/${kernel_name}_filelist_xsim.v.f -f ${app_directory}/${scripts_directory}/${kernel_name}_filelist_xsim.sv.f -f ${app_directory}/${scripts_directory}/${kernel_name}_filelist_xsim.ip.v.f"
# xvlog_include="-i ${app_directory}/${scripts_directory}/${kernel_name}_filelist_xsim.ip.vh.f"
# xvlog_include="-i ${app_directory}/${ip_directory}/utils/include -i ${app_directory}/${ip_directory}/memory/cache/iob_include -i ${app_directory}/${ip_directory}/memory/cache/iob_include/portmaps"

echo "MSG: xvhdl_files_f   file : ${xvhdl_files}" 
echo "MSG: xvlog_files_f   file : ${xvlog_files}"
echo "MSG: xvlog_include_f file : ${xvlog_include}" 

xvhdl_opts="--incr --relax -L uvm -L xilinx_vip -L system_cache_v5_0_8 ${xvhdl_files}"
xvlog_opts="--incr --relax -L uvm -L xilinx_vip --sv ${xvlog_include} ${xvlog_files}"
xelab_opts="--incr --relax -L uvm -L xilinx_vip -L xpm -L xil_defaultlib -debug typical -L xpm -L system_cache_v5_0_8 -L unisims_ver --mt auto -L axi_infrastructure_v1_1_0 -L axi_vip_v1_1_14 "
xsim_opts="-tclbatch ${app_directory}/${scripts_directory}/${tcl_directory}/cmd_xsim.tcl --wdb work.${kernel_name}_testbench.wdb work.${kernel_name}_testbench#work.glbl"
# Script info
echo -e "MSG: ${kernel_name}_testbench_xsim.sh - (Vivado v2023.1 ML (64-bit)-id)\n"

if [[ "$ctrl_mode" == "USER_MANAGED" ]]
then
   xvlog_opts+=" --define USER_MANAGED"
elif [[ "$ctrl_mode" == "AP_CTRL_HS" ]]
then
   xvlog_opts+=" --define AP_CTRL_HS"
elif [[ "$ctrl_mode" == "AP_CTRL_CHAIN" ]]
then
   xvlog_opts+=" --define AP_CTRL_CHAIN"
else
  echo "MSG: else |$ctrl_mode|"
   xvlog_opts+=" --define USER_MANAGED"
fi

 
# Main steps
run()
{
  echo "run $#"
  echo "MSG: Kernel:      $1"
  echo "MSG: APP DIR      $2"
  echo "MSG: Scripts DIR: $3"
  echo "MSG: IP DIR:      $4"
  echo "MSG: CTRL MODE    $5"
  echo "MSG: Scripts DIR  $6"
  echo "MSG: Arguments    $7"
  
  check_args $# $7
  setup $7 $8
}

# RUN_STEP: <compile>
compile()
{

  filename_vhdl="${app_directory}/${scripts_directory}/${kernel_name}_filelist_xsim.vhdl.f"
  filename_v="${app_directory}/${scripts_directory}/${kernel_name}_filelist_xsim.v.f"
  filename_sv="${app_directory}/${scripts_directory}/${kernel_name}_filelist_xsim.sv.f"

  filename_ip_vhdl="${app_directory}/${scripts_directory}/${kernel_name}_filelist_xsim.ip.vhdl.f"
  filename_ip_v="${app_directory}/${scripts_directory}/${kernel_name}_filelist_xsim.ip.v.f"
  filename_ip_sv="${app_directory}/${scripts_directory}/${kernel_name}_filelist_xsim.ip.sv.f"

  if [[ -z "$xvlog_files" ]] ; then
    echo "MSG: Empty xvlog_files : ${xvlog_files}" 
  else
    echo "Starting Compile [xvlog]"
    echo "Arg: $xvlog_opts"
    xvlog $xvlog_opts 2>&1 | tee compile.xvlog.log
  fi

  if [[ -z "$xvhdl_files" ]] ; then
    echo "MSG: Empty xvhdl_files : ${xvhdl_files}" 
  else
    echo "Starting Compile [xvhdl]"
    echo "Arg: $xvhdl_opts"
    xvhdl $xvhdl_opts 2>&1 | tee compile.xvhdl.log
  fi
}

# RUN_STEP: <elaborate>
elaborate()
{

  echo "Starting Elaborate [xelab]"
  echo "Arg: $xelab_opts"
  xelab ${kernel_name}_testbench glbl $xelab_opts -log elaborate.log

}

# RUN_STEP: <simulate>
simulate()
{
  echo "Starting Simulate [xsim]"
  echo "Arg: $xsim_opts"
  xsim $xsim_opts -log simulate.log 
}

simulate_gui()
{
  echo "Starting Simulate [xsim]"
  echo "Arg: $xsim_opts"
  xsim  --gui $xsim_opts -log simulate.log
}


# RUN_STEP: <GUI wave>
wave_run()
{

  echo "Starting Wave Run [xsim --gui]"
  echo "Arg: work.${kernel_name}_testbench.wdb"
  xsim --gui work.${kernel_name}_testbench.wdb
}

# STEP: setup
setup()
{
  echo "Setup $1"
  echo "Setup $2"
  case $1 in
    "-lib_map_path" )
      if [[ ($2 == "") ]]; then
        echo -e "ERROR: Simulation library directory path not specified (type \"./${kernel_name}_testbench_xsim.sh -help\" for more information)\n"
        exit 1
      fi
    ;;
    "-sim_gui" )
      compile
      elaborate
      simulate_gui
      exit 0
      # do not remove previous data
    ;;
    "-reset_run" )
      reset_run
      echo -e "INFO: Simulation run files deleted.\n"
      exit 0
    ;;
    "-noclean_files" )
      compile
      elaborate
      simulate
      exit 0
      # do not remove previous data
    ;;
    "-wave_run" )
      wave_run
      exit 0
      # do not remove previous data
    ;;
    *)
      compile
      elaborate
      simulate
      exit 0
    ;;
  esac

  # Add any setup/initialization commands here:-

  # <user specific commands>

}

# Delete generated data from the previous run
reset_run()
{
  files_to_remove=(xelab.pb xsim.jou xvhdl.log xvlog.log compile.log elaborate.log simulate.log xelab.log xsim.log run.log xvhdl.pb xvlog.pb ${kernel_name}_testbench.wdb xsim.dir)
  for (( i=0; i<${#files_to_remove[*]}; i++ )); do
    file="${files_to_remove[i]}"
    if [[ -e $file ]]; then
      rm -rf $file
    fi
  done
}

# Check command line arguments
check_args()
{
  echo "check_args $1"
  echo "check_args $2"
  if [[ ($1 == 7 ) && ($2 != "-sim_gui" && $2 != "-lib_map_path" && $2 != "-noclean_files" && $2 != "-reset_run" && $2 != "-wave_run" && $2 != "-help" && $2 != "-h") ]]; then
    echo -e "ERROR: Unknown option specified '$2' (type \"./${kernel_name}_testbench_xsim.sh -help\" for more information)\n"
    exit 1
  fi

  if [[ ($2 == "-help" || $2 == "-h") ]]; then
    usage
  fi
}


# Script usage
usage()
{
msg="Usage: ${kernel_name}_testbench_xsim.sh [-help]\n\
Usage: ${kernel_name}_testbench_xsim.sh [-lib_map_path]\n\
Usage: ${kernel_name}_testbench_xsim.sh [-reset_run]\n\
Usage: ${kernel_name}_testbench_xsim.sh [-wave_run]\n\
Usage: ${kernel_name}_testbench_xsim.sh [-noclean_files]\n\n\
[-help] -- Print help information for this script\n\n\
[-lib_map_path <path>] -- Compiled simulation library directory path. The simulation library is compiled\n\
using the compile_simlib tcl command. Please see 'compile_simlib -help' for more information.\n\n\
[-reset_run] -- Recreate simulator setup files and library mappings for a clean run. The generated files\n\
from the previous run will be removed. If you don't want to remove the simulator generated files, use the\n\
-noclean_files switch.\n\n\
[-noclean_files] -- Reset previous run, but do not remove simulator generated files from the previous run.\n\n"
  echo -e $msg
  exit 1
}

# Launch script
run $1 $2 $3 $4 $5 $6 $7
